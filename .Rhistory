as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel2s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel2s")))))))
pairM <- pairP <- pairI <- c()
g_sens_contM <- lam_sens_contM <- alpha_sens_contM <- c()
alpha_ii_sens_contM <- alpha_ij_sens_contM <- mu_sens_contM <- c()
nu_sens_contM <- nu_ii_sens_contM <- nu_ij_sens_contM <- c()
g_sens_contP <- lam_sens_contP <- alpha_sens_contP <- c()
alpha_ii_sens_contP <- alpha_ij_sens_contP <- mu_sens_contP <- c()
nu_sens_contP <- nu_ii_sens_contP <- nu_ij_sens_contP <- c()
g_sens_contI <- lam_sens_contI <- alpha_sens_contI <- c()
alpha_ii_sens_contI <- alpha_ij_sens_contI <- mu_sens_contI <- c()
nu_sens_contI <- nu_ii_sens_contI <- nu_ij_sens_contI <- c()
for(i in names(CXsensRaw)){
# microbe cont
if(is.brmsfit(CXsensRaw[[i]][["mSW"]]) & is.brmsfit(CXsensRaw[[i]][["mMW"]])){
g_sens_contM <- c(g_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg2s")))))
lam_sens_contM <- c(lam_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel2s")))))
mu_sens_contM <- c(mu_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem2s")))))
pairM <- c(pairM, rep(i, length(c(as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg2s"))))))))
}
else{}
if(is.brmsfit(CXsensRaw[[i]][["mSP"]]) & is.brmsfit(CXsensRaw[[i]][["mMP"]])){
g_sens_contM <- c(g_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg2s")))))
lam_sens_contM <- c(lam_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel2s")))))
mu_sens_contM <- c(mu_sens_contM,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem2s")))))
pairM <- c(pairM, rep(i, length(c(as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg2s"))))))))
}
# moist cont
if(is.brmsfit(CXsensRaw[[i]][["mSW"]]) & is.brmsfit(CXsensRaw[[i]][["mSP"]])){
g_sens_contP <- c(g_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg2s")))))
lam_sens_contP <- c(lam_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel2s")))))
mu_sens_contP <- c(mu_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem2s")))))
pairP <- c(pairP, rep(i, length(c(as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg2s"))))))))
}
else{}
if(is.brmsfit(CXsensRaw[[i]][["mMW"]]) & is.brmsfit(CXsensRaw[[i]][["mMP"]])){
g_sens_contP <- c(g_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg2s")))))
lam_sens_contP <- c(lam_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel2s")))))
mu_sens_contP <- c(mu_sens_contP,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem2s")))))
pairP <- c(pairP, rep(i, length(c(as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg2s"))))))))
}
# interaction
if(is.brmsfit(CXsensRaw[[i]][["mSW"]]) & is.brmsfit(CXsensRaw[[i]][["mMW"]]) &
is.brmsfit(CXsensRaw[[i]][["mSP"]]) & is.brmsfit(CXsensRaw[[i]][["mMP"]])){
g_sens_contI <- c(g_sens_contI,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg1s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scaleg2s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scaleg2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scaleg2s")))))
lam_sens_contI <- c(lam_sens_contI,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel1s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel2s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel2s")))))
mu_sens_contI <- c(mu_sens_contI,
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem1s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalem2s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalem2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalem2s")))))
pairI <- c(pairI, rep(i, length(c(as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel1s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel1s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel1s")))),
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mSP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mSW"]],
pars = "b_scalel2s")))) -
as.numeric(unlist(abs(posterior_samples(CXsensRaw[[i]][["mMP"]],
pars = "b_scalel2s")) -
abs(posterior_samples(CXsensRaw[[i]][["mMW"]],
pars = "b_scalel2s"))))))))
}
else{}
}
test <- cbind.data.frame(pair = pairM, lam = lam_sens_contM)
ggplot(data = test, aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5)
ggplot(data = test, aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed")
ggplot(data = test, aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairM, lam = lam_sens_contM), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairI, lam = lam_sens_contI), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
apply(lam_sens_contM, pairM, function(x), sum(x>0)/length(x))
apply(lam_sens_contM, pairM, function(x) = sum(x>0)/length(x))
apply(lam_sens_contM, pairM, function(x) sum(x>0)/length(x))
apply(lam_sens_contM, pairM, sum)
dim(lam_sens_contM)
cbind.data.frame(pair = pairM, lam = lam_sens_contM) %>%
apply(lam_sens_contM, pairM, sum)
cbind.data.frame(pair = pairM, lam = lam_sens_contM) %>%
apply(pairM, sum)
cbind.data.frame(pair = pairM, lam = lam_sens_contM) %>%
apply($pairM, sum)
lamM <- cbind.data.frame(pair = pairM, lam = lam_sens_contM) %>%
apply(lamM$lam, lamM$pairM, sum)
lamM <- cbind.data.frame(pair = pairM, lam = lam_sens_contM)
apply(lamM$lam, lamM$pairM, sum)
lamM$lam
apply(lamM$lam, lamM$pair, sum)
lamM$pair
apply(lamM$lam, lamM$pair, sum)
apply(lamM$lam, index = lamM$pair, sum)
?aply
?apply
tapply(lam_sens_contM, pairM, sum)
tapply(lam_sens_contM, pairM, function(x) sum(x)/length(x))
tapply(lam_sens_contM, pairM, function(x) sum(x>0)/length(x))
tapply(lam_sens_contP, pairP, function(x) sum(x>0)/length(x))
tapply(lam_sens_contI, pairI, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairM, lam = g_sens_contM), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(g_sens_contM, pairM, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(lam_sens_contP, pairP, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP)[which(pairP == "C.D")], aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP)[which(pairP == "C.D"),], aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(lam_sens_contP, pairP, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairM, g = g_sens_contM), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(g_sens_contM, pairM, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairM, g = g_sens_contM), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairM, g = g_sens_contM), aes(x = g, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
ggplot(data = cbind.data.frame(pair = pairP, g = g_sens_contP), aes(x = g, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(g_sens_contP, pairP, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairI, g = g_sens_contI), aes(x = g, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(gsens_contI, pairI, function(x) sum(x>0)/length(x))
tapply(g_sens_contI, pairI, function(x) sum(x>0)/length(x))
# pair specific lam sensitivities
ggplot(data = cbind.data.frame(pair = pairM, lam = lam_sens_contM), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(lam_sens_contM, pairM, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairP, lam = lam_sens_contP), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
tapply(lam_sens_contP, pairP, function(x) sum(x>0)/length(x))
ggplot(data = cbind.data.frame(pair = pairI, lam = lam_sens_contI), aes(x = lam, fill = pair)) +
geom_histogram(position = "identity", alpha = .5) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_classic()
library(readr)
baseline_estimates <- read_csv("~/Documents/GitHub/BDFFP_survival/baseline_estimates.csv")
View(baseline_estimates)
setwd("~/Desktop/BDFFP Data")
library(loo)
library(rstanarm)
# Calculating some extra stuff
clim_dat <- read_table("climate R-Data.txt")
temps_scaled <- scale(clim_dat$Avg_temp[which(clim_dat$Year %in% 1985:2011)])
prec_scaled <- scale(clim_dat$Avg_rain[which(clim_dat$Year %in% 1985:2011)])
# function to import all sheets from excel file into a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
library(readxl)
# function to import all sheets from excel file into a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
sp <- names(bird_dat)[-length(bird_dat)]
# get just the years of interest
bird_dat2 <- list()
missing_years <- list() # just to check that the missing years is always the same
for(i in sp){
bird_dat2[[i]] <- bird_dat[[i]][which(bird_dat[[i]][["rs"]] == 1501),]
bird_dat2[[i]] <- bird_dat2[[i]][, which(names(bird_dat2[[i]]) %in% 1985:2012)]
bird_dat2[[i]][which(bird_dat2[[i]] == ".", arr.ind = TRUE)] <- 3 # STAN won't like the dots
missing_years[[i]] <- setdiff(1985:2012,as.numeric(names(bird_dat2[[i]]))) # which additional years are unsampled?
for(j in missing_years[[i]]){
bird_dat2[[i]][,as.character(j)] <- rep(3, nrow(bird_dat2[[i]]))
}
bird_dat2[[i]] <- bird_dat2[[i]][,order(names(bird_dat2[[i]]))] # get in the right order
}
birds1 <- readRDS("bird_mods1.rds")
birds2 <- readRDS("bird_mods2.rds")
birds3 <- readRDS("bird_mods3.rds")
birds4 <- readRDS("bird_mods4.rds")
birds5 <- readRDS("bird_mods5.rds")
birds6 <- readRDS("bird_mods6.rds")
logs1 <- readRDS("log_liks1.rds")
logs2 <- readRDS("log_liks2.rds")
logs3 <- readRDS("log_liks3.rds")
logs4 <- readRDS("log_liks4.rds")
logs5 <- readRDS("log_liks5.rds")
logs6 <- readRDS("log_liks6.rds")
birds <- c(birds1, birds2, birds3, birds4, birds5, birds6)
logs <- c(logs1, logs2, logs3, logs4, logs5, logs6)
temp_points <- prec_points <- matrix(data = NA, nrow = 27, ncol = length(birds))
ests <- matrix(data = NA, nrow = length(birds), ncol = 13)
for(i in 1:length(birds)){
temp_df <- as.data.frame(birds[[i]][["phiTEMPp."]][["model"]])
prec_df <- as.data.frame(birds[[i]][["phiPRECp."]][["model"]])
temp_points[,i] <- unname(apply(temp_df[,28:54], 2, median))
prec_points[,i] <- unname(apply(prec_df[,28:54], 2, median))
ests[i,1] <- names(birds)[[i]]
ests[i,2] <- quantile(temp_df$phi_0, 0.025)
ests[i,3] <- median(temp_df$phi_0)
ests[i,4] <- quantile(temp_df$phi_0, 0.975)
ests[i,5] <- quantile(temp_df$phi_temp, 0.025)
ests[i,6] <- median(temp_df$phi_temp)
ests[i,7] <- quantile(temp_df$phi_temp, 0.975)
ests[i,8] <- quantile(prec_df$phi_0, 0.025)
ests[i,9] <- median(prec_df$phi_0)
ests[i,10] <- quantile(prec_df$phi_0, 0.975)
ests[i,11] <- quantile(prec_df$phi_prec, 0.025)
ests[i,12] <- median(prec_df$phi_prec)
ests[i,13] <- quantile(prec_df$phi_prec, 0.975)
}
temp_sig <- prec_sig <- c()
for(i in 1:length(birds)){
temp_birds1 <- which(rownames(birds[[i]][["full_comp"]]) == "model7") <
which(rownames(birds[[i]][["full_comp"]]) == "model1") &
which(rownames(birds[[i]][["full_comp"]]) == "model7") <
which(rownames(birds[[i]][["full_comp"]]) == "model2") &
which(rownames(birds[[i]][["full_comp"]]) == "model7") <
which(rownames(birds[[i]][["full_comp"]]) == "model3") &
which(rownames(birds[[i]][["full_comp"]]) == "model7") <
which(rownames(birds[[i]][["full_comp"]]) == "model4")
temp_df <- as.data.frame(birds[[i]][["phiTEMPp."]][["model"]])
temp_birds2 <- unname(quantile(temp_df$phi_temp, 0.025) > 0 |
quantile(temp_df$phi_temp, 0.975) < 0)
temp_sig <- c(temp_sig, temp_birds1&temp_birds2)
prec_birds1 <- which(rownames(birds[[i]][["full_comp"]]) == "model5") <
which(rownames(birds[[i]][["full_comp"]]) == "model1") &
which(rownames(birds[[i]][["full_comp"]]) == "model5") <
which(rownames(birds[[i]][["full_comp"]]) == "model2") &
which(rownames(birds[[i]][["full_comp"]]) == "model5") <
which(rownames(birds[[i]][["full_comp"]]) == "model3") &
which(rownames(birds[[i]][["full_comp"]]) == "model5") <
which(rownames(birds[[i]][["full_comp"]]) == "model4")
prec_df <- as.data.frame(birds[[i]][["phiPRECp."]][["model"]])
prec_birds2 <- unname(quantile(prec_df$phi_prec, 0.025) > 0 |
quantile(prec_df$phi_prec, 0.975) < 0)
prec_sig <- c(prec_sig, prec_birds1&prec_birds2)
}
ests.df <- as.data.frame(ests)
names(ests.df) <- c("sp", "temp_int_low", "temp_int_med", "temp_int_up",
"temp_slope_low", "temp_slope_med", "temp_slope_up",
"prec_int_low", "prec_int_med", "prec_int_up",
"prec_slope_low", "prec_slope_med", "prec_slope_up")
ests.df
i
i = 1
df <- as.data.frame(birds[[i]][["phi.p."]][["model"]])
ests <- matrix(data = NA, nrow = length(birds), ncol = 7)
for(i in 1:length(birds)){
df <- as.data.frame(birds[[i]][["phi.p."]][["model"]])
ests[i,1] <- names(birds)[[i]]
ests[i,2] <- quantile(df$phi, 0.025)
ests[i,3] <- median(df$phi)
ests[i,4] <- quantile(df$phi, 0.975)
ests[i,5] <- quantile(df$`p[1]`, 0.025)
ests[i,6] <- median(df$`p[1]`)
ests[i,7] <- quantile(df$`p[1]`, 0.975)
}
ests
names(ests.df) <- c("sp", "phi_low", "phi_med", "phi_up",
"p_low", "p_med", "p_up")
write.csv(ests.df, file = "baseline_estimates.csv")
ests.df
ests <- matrix(data = NA, nrow = length(birds), ncol = 7)
for(i in 1:length(birds)){
df <- as.data.frame(birds[[i]][["phi.p."]][["model"]])
ests[i,1] <- names(birds)[[i]]
ests[i,2] <- quantile(df$phi, 0.025)
ests[i,3] <- median(df$phi)
ests[i,4] <- quantile(df$phi, 0.975)
ests[i,5] <- quantile(df$`p[1]`, 0.025)
ests[i,6] <- median(df$`p[1]`)
ests[i,7] <- quantile(df$`p[1]`, 0.975)
}
ests
ests.df <- as.data.frame(ests)
ests.df
names(ests.df) <- c("sp", "phi_low", "phi_med", "phi_up",
"p_low", "p_med", "p_up")
ests.df
write.csv(ests.df, file = "baseline_estimates.csv")
setwd("~/Documents/GitHub/BDFFP_survival")
write.csv(ests.df, file = "baseline_estimates.csv")
library(readr)
baseline_estimates2 <- read_csv("baseline_estimates.csv")
View(baseline_estimates2)
