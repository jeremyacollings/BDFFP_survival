scale_color_gradient(low = "#F5D544", high = "#844A9D")
if(sterile == TRUE) p + geom_point(aes(x = nicheS, y = fitS), color = "#2F242C") else p
}
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
s <- rep(-.2, 201)
p <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- dat$p + dat$v
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
sa <- rep(-.2, 201)
pa <- rep(.2, 201)
sb <- rep(.2, 201)
pb <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, sa, pa, sb, pb, v)
dat$pa.scaled <- dat$pa + dat$v
dat$pb.scaled <- dat$pb - dat$v
ggplot(data = dat) + geom_line(aes(x = v, y = pa.scaled), color = "red") +
geom_line(aes(x = v, y = pb.scaled), color = "black") +
theme_classic(base_size = 12) + xlab("Rainfall") + ylab("Phi")
dat$Aaa <- dat$Caa + dat$sa*dat$pa.scaled
dat$Abb <- dat$Cbb + dat$sb*dat$pb.scaled
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
sP <- rep(-.2, 201)
pP <- rep(.2, 201)
sM <- rep(.2, 201)
pM <- rep(.2, 201)
sDa <- rep(.3, 201)
pDa <- rep(.2, 201)
sDb <- rep(.1, 201)
pDb <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, sP, pP, sM, pM, sDa, pDa, sDb, pDb, v)
dat$pP.scaled <- dat$pP + dat$v
dat$pM.scaled <- dat$pM - .5*dat$v
dat$pDa.scaled <- dat$pDa + dat$v
dat$pDb.scaled <- dat$pDb + dat$v
ggplot(data = dat) + geom_line(aes(x = v, y = pP.scaled+.1), color = "red") +
geom_line(aes(x = v, y = pM.scaled), color = "black") +
geom_line(aes(x = v, y = pDa.scaled), color = "green") +
geom_line(aes(x = v, y = pDb.scaled-.1), color = "blue") +
theme_classic(base_size = 12) + xlab("Rainfall") + ylab("Phi")
dat$Aaa <- dat$Caa + dat$sP*dat$pP.scaled + dat$sDa*dat$pDa.scaled
dat$Abb <- dat$Cbb + dat$sM*dat$pM.scaled + dat$sDb*dat$pDb.scaled
dat$Aba <- dat$Cba + dat$sDb*dat$pDa.scaled
dat$Aab <- dat$Cab + dat$sDa*dat$pDb.scaled
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
sa <- rep(-.2, 201)
pa <- rep(.2, 201)
sb <- rep(.2, 201)
pb <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, sa, pa, sb, pb, v)
dat$pa.scaled <- dat$pa + dat$v
dat$pb.scaled <- dat$pb - dat$v
ggplot(data = dat) + geom_line(aes(x = v, y = pa.scaled), color = "red") +
geom_line(aes(x = v, y = pb.scaled), color = "black") +
theme_classic(base_size = 12) + xlab("Rainfall") + ylab("Phi")
dat$Aaa <- dat$Caa + dat$sa*dat$pa.scaled
dat$Abb <- dat$Cbb + dat$sb*dat$pb.scaled
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
s <- rep(-.2, 201)
p <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- dat$p + dat$v
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
library(ggplot2)
coexist_plot <- function(d, sterile = FALSE){
# d is a dataframe that includes the following:
# Microbe independent competitive effects ("Caa", "Cab", "Cbb", "Cba")
# Competition coefficients ("Aaa", "Aab", "Abb", "Aba")
# Environmental gradient ("v")
d$niche <- 1 - sqrt((d$Aba * d$Aab)/(d$Aaa * d$Abb))
d$fit <- sqrt((d$Aaa * d$Aab) / (d$Abb * d$Aba))
d$niche[d$Aaa > 0 | d$Abb > 0 | d$Aab > 0 | d$Aba > 0] <- NaN
d$fit[d$Aaa > 0 | d$Abb > 0 | d$Aab > 0 | d$Aba > 0] <- NaN
nicheS <- 1 - sqrt((d$Cba[1] * d$Cab[1])/(d$Caa[1] * d$Cbb[1]))
fitS <- sqrt((d$Caa[1] * d$Cab[1]) / (d$Cbb[1] * d$Cba[1]))
f <- function(x) 1 / (-x + 1)
p <- ggplot(d, aes(x = niche, y = fit, color = v)) +
geom_point(size = 2) + geom_abline(slope = -1, intercept = 1) +
theme_classic(base_size = 12) + stat_function(fun=f) + xlim(-1, 1) + ylim(0, 2) +
xlab("Niche Difference") + ylab("Fitness Ratio") +
scale_color_gradient(low = "#F5D544", high = "#844A9D")
if(sterile == TRUE) p + geom_point(aes(x = nicheS, y = fitS), color = "#2F242C") else p
}
# Linear Phi
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- dat$p + dat$v
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
dat <- dat[which(dat$p.scaled >= 0), ]
ggplot(data = dat, aes( x= v, y = p.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
p <- ggplot(d, aes(x = niche, y = fit, color = v)) +
geom_point(size = 2) + geom_abline(slope = -1, intercept = 1) +
theme_classic(base_size = 12) + stat_function(fun=f) + xlim(-1, 1) + ylim(0, 2) +
xlab("Niche Difference") + ylab("Fitness Ratio") +
scale_color_gradient(low = "#F5D544", high = "#844A9D") +
theme(legend.position = "none")
coexist_plot <- function(d, sterile = FALSE){
# d is a dataframe that includes the following:
# Microbe independent competitive effects ("Caa", "Cab", "Cbb", "Cba")
# Competition coefficients ("Aaa", "Aab", "Abb", "Aba")
# Environmental gradient ("v")
d$niche <- 1 - sqrt((d$Aba * d$Aab)/(d$Aaa * d$Abb))
d$fit <- sqrt((d$Aaa * d$Aab) / (d$Abb * d$Aba))
d$niche[d$Aaa > 0 | d$Abb > 0 | d$Aab > 0 | d$Aba > 0] <- NaN
d$fit[d$Aaa > 0 | d$Abb > 0 | d$Aab > 0 | d$Aba > 0] <- NaN
nicheS <- 1 - sqrt((d$Cba[1] * d$Cab[1])/(d$Caa[1] * d$Cbb[1]))
fitS <- sqrt((d$Caa[1] * d$Cab[1]) / (d$Cbb[1] * d$Cba[1]))
f <- function(x) 1 / (-x + 1)
p <- ggplot(d, aes(x = niche, y = fit, color = v)) +
geom_point(size = 2) + geom_abline(slope = -1, intercept = 1) +
theme_classic(base_size = 12) + stat_function(fun=f) + xlim(-1, 1) + ylim(0, 2) +
xlab("Niche Difference") + ylab("Fitness Ratio") +
scale_color_gradient(low = "#F5D544", high = "#844A9D") +
theme(legend.position = "none")
if(sterile == TRUE) p + geom_point(aes(x = nicheS, y = fitS), color = "#2F242C") else p
}
Caa <- rep(-.5, 201)
Cbb <- rep(-.8, 201)
Cba <- rep(-.8, 201)
Cab <- rep(-.5, 201)
s <- rep(-.2, 201)
p <- rep(.2, 201)
v <- seq(-10, 10, .1)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- dat$p + dat$v
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
# Linear Phi
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- dat$p + dat$v
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
dat <- dat[which(dat$p.scaled >= 0), ]
ggplot(data = dat, aes( x= v, y = p.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
#Linear Sigma
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- dat$s - dat$v
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- (2/(1+exp(-2*v)))
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
dat <- dat[which(dat$p.scaled >= 0), ]
ggplot(data = dat, aes( x= v, y = p.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- (4/(1+exp(v*2))) - 2.2
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$p.scaled <- -.5*(v-2)^2+2.2
ggplot(data = dat, aes( x= v, y = p.scaled)) + geom_line() + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
dat <- dat[which(dat$p.scaled >= 0), ]
ggplot(data = dat, aes( x= v, y = p.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Phi_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$s*dat$p.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- (1/4)*(v-2)^2-2.2
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE)
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- (1/4)*(v)^2-2.2
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Abb <- dat$Cbb
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE) + xlim(-.5, .5) + ylim(.5, 1.5) #+ theme(legend.position = "none")
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- .25*(v)^2-2.2
dat$s2.scaled <- .25*(v)^2-2.2
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
ggplot(data = dat, aes( x= v, y = s2.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Abb <- dat$Cbb + dat$p*dat$s2.scaled
dat$Aba <- dat$Cba
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE) + xlim(-.5, .5) + ylim(.5, 1.5) +
theme(legend.position = "none")
Caa <- rep(-.5, 401)
Cbb <- rep(-.8, 401)
Cba <- rep(-.8, 401)
Cab <- rep(-.5, 401)
s <- rep(-.2, 401)
p <- rep(.2, 401)
v <- seq(-2, 2, .01)
dat <- cbind.data.frame(Caa, Cbb, Cba, Cab, s, p, v)
dat$s.scaled <- .25*(v)^2-2.2
dat$s2.scaled <- .25*(v-1)^2-2.2
ggplot(data = dat, aes( x= v, y = s.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D") +
geom_line(aes(x = v, y = s2.scaled, color = v), size = 5)
ggplot(data = dat, aes( x= v, y = s2.scaled, color = v)) + geom_line(size = 5) + theme_classic(base_size = 12) +
xlab("Rainfall") + ylab("Sig_A") + scale_color_gradient(low = "#F5D544", high = "#844A9D")
dat$Aaa <- dat$Caa + dat$p*dat$s.scaled
dat$Aba <- dat$Cba
dat$Abb <- dat$Cbb + dat$p*dat$s2.scaled
dat$Aab <- dat$Cab
coexist_plot(dat, TRUE) + xlim(-.5, .5) + ylim(.5, 1.5) +
theme(legend.position = "none")
coexist_plot(dat, TRUE) + xlim(-.5, .5) + ylim(.5, 1.5) +
theme(legend.position = "right")
setwd("~/Documents/GitHub/BDFFP_survival")
# function to import all sheets from excel file into a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
sp <- names(bird_dat)[-length(bird_dat)]
setwd("~/Documents/GitHub/BDFFP_survival")
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
library(readxl)
# function to import all sheets from excel file into a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
sp <- names(bird_dat)[-length(bird_dat)]
# get just the years of interest
bird_dat2 <- list()
for(i in sp){
bird_dat2[[i]] <- bird_dat[[i]][, which(names(bird_dat[[i]]) %in% 1985:2012)]
bird_dat2[[i]][which(bird_dat2[[i]] == ".", arr.ind = TRUE)] <- 0 # FIGURE OUT UNSAMPLED
missing_years <- setdiff(1985:2012,as.numeric(names(bird_dat2[[i]]))) # which additional years are unsampled?
for(j in missing_years){
bird_dat2[[i]][,as.character(j)] <- rep(0, nrow(bird_dat2[[i]]))
}
bird_dat2[[i]] <- bird_dat2[[i]][,order(names(bird_dat2[[i]]))] # get in the right order
}
bird_dat
bird_dat2[[i]]
# get just the years of interest
bird_dat2 <- list()
missing_years <- list() # just to check that the missing years is always the same
for(i in sp){
bird_dat2[[i]] <- bird_dat[[i]][, which(names(bird_dat[[i]]) %in% 1985:2012)]
bird_dat2[[i]][which(bird_dat2[[i]] == ".", arr.ind = TRUE)] <- 0 # STAN won't like the dots
missing_years[[i]] <- setdiff(1985:2012,as.numeric(names(bird_dat2[[i]]))) # which additional years are unsampled?
for(j in missing_years[[i]]){
bird_dat2[[i]][,as.character(j)] <- rep(0, nrow(bird_dat2[[i]]))
}
bird_dat2[[i]] <- bird_dat2[[i]][,order(names(bird_dat2[[i]]))] # get in the right order
}
missing_years
library(tidyverse)
library(readxl)
library(rstan)
s = sp[1]
stan_dat <- list(T = 28, I = nrow(birds_dat3[[s]]), y = as.matrix(apply(birds_dat3[[s]], 2, as.numeric)),
temp = as.numeric(scale(clim_dat$Avg_temp[which(clim_dat$Year %in% 1985:2012)])),
prec = as.numeric(scale(clim_dat$Avg_rain[which(clim_dat$Year %in% 1985:2012)])))
# function to import all sheets from excel file into a list
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- excel_sheets(filename)
x <- lapply(sheets, function(X) read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
bird_dat <- read_excel_allsheets("Mark-recapture data BDFFP.xlsx")
sp <- names(bird_dat)[-length(bird_dat)]
# bring in climate data
clim_dat <- read_table("climate R-Data.txt")
# get just the years of interest
bird_dat2 <- list()
missing_years <- list() # just to check that the missing years is always the same
for(i in sp){
bird_dat2[[i]] <- bird_dat[[i]][, which(names(bird_dat[[i]]) %in% 1985:2012)]
bird_dat2[[i]][which(bird_dat2[[i]] == ".", arr.ind = TRUE)] <- 0 # STAN won't like the dots
missing_years[[i]] <- setdiff(1985:2012,as.numeric(names(bird_dat2[[i]]))) # which additional years are unsampled?
for(j in missing_years[[i]]){
bird_dat2[[i]][,as.character(j)] <- rep(0, nrow(bird_dat2[[i]]))
}
bird_dat2[[i]] <- bird_dat2[[i]][,order(names(bird_dat2[[i]]))] # get in the right order
}
n.observed <- c() # number of birds with an observation in the time period
for(i in sp){
x <- bird_dat2[[i]]
n.observed <- c(n.observed,sum(rowSums(apply(x, 2, as.numeric), na.rm = TRUE) > 1))
}
birds_dat3 <- bird_dat2[which(n.observed > 25)] # get rid of sp with less than 25 birds observed in time period
models <- c("CJS_...stan", "CJS_t..stan", "CJS_.t.stan", "CJS_tt.stan",
"CJS_P..stan", "CJS_W..stan", "CJS_P+W..stan", "CJS_PxW..stan",
"CJS_Pt.stan", "CJS_Wt.stan", "CJS_P+Wt.stan", "CJS_PxWt.stan")
# Note: For each time dependent p model, unsampled years have
# fixed p estimates at 0
rm.params <- c("chi", "mu") # I don't care about these parameters
sp <- names(birds_dat3)
# running peacemeal or I'll run out of memory
mods <- list()
loos <- list()
comps <- list()
missing_years[[s]]
setdiff(1985:2012, missing_years[[s]])
stan_dat <- list(T = 28, I = nrow(birds_dat3[[s]]), y = as.matrix(apply(birds_dat3[[s]], 2, as.numeric)),
temp = as.numeric(scale(clim_dat$Avg_temp[which(clim_dat$Year %in% 1985:2012)])),
prec = as.numeric(scale(clim_dat$Avg_rain[which(clim_dat$Year %in% 1985:2012)])),
missing = missing_years[[s]], n_missing = length(missing_years[[s]]),
observed = setdiff(1985:2012, missing_years[[s]]),
n.observed = length(setdiff(1985:2012, missing_years[[s]])))
stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
stan_dat <- list(T = 28, I = nrow(birds_dat3[[s]]), y = as.matrix(apply(birds_dat3[[s]], 2, as.numeric)),
temp = as.numeric(scale(clim_dat$Avg_temp[which(clim_dat$Year %in% 1985:2012)])),
prec = as.numeric(scale(clim_dat$Avg_rain[which(clim_dat$Year %in% 1985:2012)])),
missing = missing_years[[s]], n_missing = length(missing_years[[s]]),
observed = setdiff(1985:2012, missing_years[[s]]),
n_observed = length(setdiff(1985:2012, missing_years[[s]])))
stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
length(1985:2012)
which(1985:2012 %in% missing_years[[s]])
1985:2012
missing_years[[s]]
stan_dat <- list(T = 28, I = nrow(birds_dat3[[s]]), y = as.matrix(apply(birds_dat3[[s]], 2, as.numeric)),
temp = as.numeric(scale(clim_dat$Avg_temp[which(clim_dat$Year %in% 1985:2012)])),
prec = as.numeric(scale(clim_dat$Avg_rain[which(clim_dat$Year %in% 1985:2012)])),
missing = which(1985:2012 %in% missing_years[[s]]), n_missing = length(missing_years[[s]]),
observed = which(1985:2012 %in% setdiff(1985:2012, missing_years[[s]])),
n_observed = length(setdiff(1985:2012, missing_years[[s]])))
stan_dat
stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
dbinom(0, 1, 0)
log(1)
dbinom(0, 1, 0, log = TRUE)
dbinom(1, 1, 0, log = TRUE)
dbinom(0, 1, .15, log = TRUE)
dbinom(0, 1, .01, log = TRUE)
dbinom(0, 1, 1, log = TRUE)
dbinom(0, 1, .99, log = TRUE)
test <- stan(file = "STAN_files/CJS_.t.stan", data = stan_dat, pars = rm.params, include = FALSE, chains = 2, iter = 2000)
library(loo)
loo(test)
waic(test)
waic(loo(test))
